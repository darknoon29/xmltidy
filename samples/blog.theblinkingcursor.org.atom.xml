<?xml version='1.0' encoding='UTF-8'?><?xml-stylesheet href="http://www.blogger.com/styles/atom.css" type="text/css"?><feed xmlns='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:georss='http://www.georss.org/georss' xmlns:thr='http://purl.org/syndication/thread/1.0'><id>tag:blogger.com,1999:blog-2525926494363680472</id><updated>2010-09-18T09:26:27.412-07:00</updated><title type='text'>The Blinking Cursor</title><subtitle type='html'>...featuring the keyboards of Jonas Gorauskas.</subtitle><link rel='http://schemas.google.com/g/2005#feed' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/posts/default'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/'/><link rel='hub' href='http://pubsubhubbub.appspot.com/'/><link rel='next' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default?start-index=26&amp;max-results=25'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email></author><generator version='7.00' uri='http://www.blogger.com'>Blogger</generator><openSearch:totalResults>61</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>25</openSearch:itemsPerPage><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-5901330132369637610</id><published>2010-08-04T13:28:00.000-07:00</published><updated>2010-08-04T21:20:13.152-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Security'/><category scheme='http://www.blogger.com/atom/ns#' term='Crypto'/><category scheme='http://www.blogger.com/atom/ns#' term='CSharp'/><title type='text'>A ROT-13 implementation in CSharp</title><content type='html'>&lt;p&gt;ROT-13 is a simple substitution cipher where the current character is rotated by 13 characters, which finds its symmetrical opposite in the modern English alphabet. This property allows the cipher to be reciprocal and therefore it can be used to obfuscate a clear text string and also transform the obfuscated string back into its original clear text equivalent.&lt;/p&gt;&lt;p&gt;I use the term obfuscation in the previous paragraph to emphasize the fact that the ROT-13 cipher is not secure and any obfuscated strings can be easily reversed simply by knowing that a ROT-13 cipher has been used. &lt;/p&gt;&lt;p&gt;&lt;b&gt;The Implementation&lt;/b&gt;&lt;/p&gt;&lt;p&gt;The implementation of the cipher is really simple and there are many approaches that one can use to achieve the same outcome. The one I chose is based on a lookup table that I initially build and then use many times. This is basically the same approach used in the Python module &lt;code&gt;this&lt;/code&gt; (enter &lt;code&gt;import this&lt;/code&gt; on a python prompt). You can see the implementation by finding the &lt;code&gt;this.py&lt;/code&gt; file that comes with your python implementation. &lt;/p&gt;&lt;p&gt;The lookup table that I use is implemented using a generic dictionary. When the &lt;code&gt;Rot13&lt;/code&gt; function is called, I check if the lookup table exists and if it doesn't, I'll build it. I use the seeds 65 and 97, which are the ASCII values for &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; respectively, and from there I move 26 values to the right while applying a modulo 26, which tells me if I need to wrap-around to the beginning. &lt;/p&gt;&lt;p&gt;Once the lookup table is built, I can use it by simply going over the string parameter passed into &lt;code&gt;Rot13&lt;/code&gt;, and substituting each character in the string by the corresponding value in the lookup table. This is what it looks like:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    private Dictionary&amp;lt;char, char&amp;gt; d = null;&lt;br /&gt;&lt;br /&gt;    public string Rot13(string s) {&lt;br /&gt;        if (d == null || d.Count == 0) {         // build the lookup table&lt;br /&gt;            d = new Dictionary&amp;lt;char, char&amp;gt;();    //  if needed&lt;br /&gt;            int[] sr = { 65, 97 };               // A=65; a=97; ASCII Codes&lt;br /&gt;            foreach (int c in sr) {&lt;br /&gt;                for (int i = 0; i &amp;lt; 26; i++) {   // 26 alpha chars&lt;br /&gt;                    d.Add((char)(i + c), (char)((i + 13) % 26 + c));&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        StringBuilder sb = new StringBuilder();&lt;br /&gt;        foreach (var item in s.ToCharArray()) {&lt;br /&gt;            if (d.ContainsKey(item))             // Worry only about alpha characters&lt;br /&gt;                sb.Append(d[item]);              //  leave number, etc. untouched&lt;br /&gt;            else&lt;br /&gt;                sb.Append(item);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        return sb.ToString();&lt;br /&gt;    }&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Using the Algorithm&lt;/b&gt;&lt;/p&gt;&lt;p&gt;To use the ROT-13 cipher algorithm above, you simply have to call the &lt;code&gt;Rot13&lt;/code&gt; function and send it a string parameter which represents the string you want to obfuscate. In the example code below the &lt;code&gt;Main&lt;/code&gt; function uses a command line argument passed in:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    static void Main(string[] args) {&lt;br /&gt;        if (args.Length == 0) {&lt;br /&gt;            WL("Please provide a string to obfuscate using the ROT 13 cypher.");&lt;br /&gt;            Environment.Exit(0);&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        Program p = new Program();&lt;br /&gt;&lt;br /&gt;        WL(String.Format("Original String: {0}", args[0]));&lt;br /&gt;        WL(String.Format("Obfuscated String: {0}", p.Rot13(args[0])));&lt;br /&gt;        WL(String.Format("De-Obfuscated String: {0}", p.Rot13(p.Rot13(args[0]))));&lt;br /&gt;&lt;br /&gt;        WL("\nPress enter to continue...");&lt;br /&gt;        RL();&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    static Func&amp;lt;string&amp;gt; RL = () =&amp;gt; Console.ReadLine();&lt;br /&gt;    static Action&amp;lt;Object&amp;gt; WL = obj =&amp;gt; Console.WriteLine(obj);&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If you call the Rot13.exe program like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    H:\&amp;gt;Rot13.exe HELLO&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Your output will be the following:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;    Original String: HELLO&lt;br /&gt;    Obfuscated String: URYYB&lt;br /&gt;    De-Obfuscated String: HELLO&lt;br /&gt;&lt;br /&gt;    Press enter to continue...&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;b&gt;Conclusion&lt;/b&gt;&lt;/p&gt;&lt;p&gt;I am teaching myself cryptography and security concepts and I am using this venue to write my notes and solidify my ideas on this topic. I will be filing these under the crypto and security tags.&lt;/p&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-5901330132369637610?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/5901330132369637610/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=5901330132369637610' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/5901330132369637610'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/5901330132369637610'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2010/08/rot-13-implementation-in-csharp.html' title='A ROT-13 implementation in CSharp'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-4523474719580492873</id><published>2010-07-22T14:50:00.000-07:00</published><updated>2010-07-22T14:50:51.026-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Linux'/><title type='text'>Mounting a USB Stick in Linux</title><content type='html'>&lt;p&gt;Here is a quick way to mount a USB thumb drive in Linux. Most distros will recognize the USB stick when you plug it in, but it case they don't then this command comes in handy:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo mount -t vfat /dev/sdf1 /mnt/cruzer/&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now you can access and browse the contents of the usb stick by change the current directory to /mnt/cruzer/ . Your mileage may vary and your Linux distro may have a different file system hierarchy.&lt;/p&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-4523474719580492873?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/4523474719580492873/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=4523474719580492873' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/4523474719580492873'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/4523474719580492873'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2010/07/mounting-usb-stick-in-linux.html' title='Mounting a USB Stick in Linux'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-3905858547856877549</id><published>2010-07-05T19:26:00.000-07:00</published><updated>2010-07-05T19:26:46.035-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='Django'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><title type='text'>Errors with the prepopulate_from SlugField parameter in Django 1.2.1</title><content type='html'>&lt;p&gt;I recently upgraded to Django version 1.2.1 and I immediatelly noticed that someof my models were broken with the following error:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;C:\test&gt;python manage.py syncdb&lt;br /&gt;Traceback (most recent call last):&lt;br /&gt;  File "manage.py", line 11, in &lt;module&gt;&lt;br /&gt;    execute_manager(settings)&lt;br /&gt;  File "C:\Python26\lib\site-packages\django-1.2.1-py2.6.egg\django\core\management\__init__.py", line 438, in execute_manager&lt;br /&gt;    utility.execute()&lt;br /&gt;  File "C:\Python26\lib\site-packages\django-1.2.1-py2.6.egg\django\core\management\__init__.py", line 379, in execute&lt;br /&gt;    self.fetch_command(subcommand).run_from_argv(self.argv)&lt;br /&gt;  File "C:\Python26\lib\site-packages\django-1.2.1-py2.6.egg\django\core\management\base.py", line 191, in run_from_argv&lt;br /&gt;    self.execute(*args, **options.__dict__)&lt;br /&gt;  File "C:\Python26\lib\site-packages\django-1.2.1-py2.6.egg\django\core\management\base.py", line 217, in execute&lt;br /&gt;    self.validate()&lt;br /&gt;  File "C:\Python26\lib\site-packages\django-1.2.1-py2.6.egg\django\core\management\base.py", line 245, in validate&lt;br /&gt;    num_errors = get_validation_errors(s, app)&lt;br /&gt;  File "C:\Python26\lib\site-packages\django-1.2.1-py2.6.egg\django\core\management\validation.py", line 28, in get_validation_errors&lt;br /&gt;    for (app_name, error) in get_app_errors().items():&lt;br /&gt;  File "C:\Python26\lib\site-packages\django-1.2.1-py2.6.egg\django\db\models\loading.py", line 146, in get_app_errors&lt;br /&gt;    self._populate()&lt;br /&gt;  File "C:\Python26\lib\site-packages\django-1.2.1-py2.6.egg\django\db\models\loading.py", line 61, in _populate&lt;br /&gt;    self.load_app(app_name, True)&lt;br /&gt;  File "C:\Python26\lib\site-packages\django-1.2.1-py2.6.egg\django\db\models\loading.py", line 78, in load_app&lt;br /&gt;    models = import_module('.models', app_name)&lt;br /&gt;  File "C:\Python26\lib\site-packages\django-1.2.1-py2.6.egg\django\utils\importlib.py", line 35, in import_module&lt;br /&gt;    __import__(name)&lt;br /&gt;  File "..\tso\blog\models.py", line 50, in &lt;module&gt;&lt;br /&gt;    class Category(models.Model):&lt;br /&gt;  File "..\tso\blog\models.py", line 53, in Category&lt;br /&gt;    slug = models.SlugField(unique=True, prepopulate_from=('title',), help_text='Used in the category URL. Must be unique')&lt;br /&gt;  File "C:\Python26\lib\site-packages\django-1.2.1-py2.6.egg\django\db\models\fields\__init__.py", line 988, in __init__&lt;br /&gt;    super(SlugField, self).__init__(*args, **kwargs)&lt;br /&gt;  File "C:\Python26\lib\site-packages\django-1.2.1-py2.6.egg\django\db\models\fields\__init__.py", line 542, in __init__&lt;br /&gt;    super(CharField, self).__init__(*args, **kwargs)&lt;br /&gt;TypeError: __init__() got an unexpected keyword argument 'prepopulate_from'&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So I did a little bit of research on this problem and I found the followingexplanation for what is going on:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;b&gt;Changed prepopulate_from to be defined in the Admin class, not database fieldclasses&lt;/b&gt;&lt;/p&gt;&lt;p&gt;As of [4446], the prepopulate_from option to database fields no longerexists. It's been discontinued in favor of the new prepopulated_fields optionon class Admin. The new prepopulated_fields option, if given, should be adictionary mapping field names to lists/tuples of field names. This change wasmade in an effort to remove admin-specific options from the modelitself. Here's an example comparing old syntax and new syntax:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;# OLD:&lt;br /&gt;class MyModel(models.Model):&lt;br /&gt;    first_name = models.CharField(max_length=30)&lt;br /&gt;    last_name = models.CharField(max_length=30)&lt;br /&gt;    slug = models.CharField(max_length=60, prepopulate_from=('first_name', 'last_name'))&lt;br /&gt;&lt;br /&gt;    class Admin:&lt;br /&gt;        pass&lt;br /&gt;&lt;br /&gt;# NEW:&lt;br /&gt;class MyModel(models.Model):&lt;br /&gt;    first_name = models.CharField(max_length=30)&lt;br /&gt;    last_name = models.CharField(max_length=30)&lt;br /&gt;    slug = models.CharField(max_length=60)&lt;br /&gt;&lt;br /&gt;from django.contrib import admin&lt;br /&gt;&lt;br /&gt;class MyModelAdmin(admin.ModelAdmin):&lt;br /&gt;    prepopulated_fields = {'slug': ('first_name', 'last_name')}&lt;br /&gt;&lt;br /&gt;admin.site.register(MyModel, MyModelAdmin)&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;p&gt;The above is taken from the Django wiki page that talks about&lt;a href="http://code.djangoproject.com/wiki/NewformsAdminBranch"&gt; thenewforms-admin branch&lt;/a&gt;.&lt;/p&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-3905858547856877549?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/3905858547856877549/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=3905858547856877549' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/3905858547856877549'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/3905858547856877549'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2010/07/errors-with-prepopulatefrom-slugfield.html' title='Errors with the prepopulate_from SlugField parameter in Django 1.2.1'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-416547025486809629</id><published>2010-06-19T02:07:00.000-07:00</published><updated>2010-06-19T02:16:33.288-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Commentary'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><category scheme='http://www.blogger.com/atom/ns#' term='Cool Stuff'/><category scheme='http://www.blogger.com/atom/ns#' term='Emacs'/><title type='text'>This is why the command line will never die</title><content type='html'>&lt;p&gt;A while back I wrote about &lt;a href="http://blog.theblinkingcursor.org/2008/02/new-command-line.html"&gt;the address line of the browser being the newcommand line&lt;/a&gt;. It turns out I was wrong. The command line itself is the newcommand line.&lt;/p&gt;&lt;p&gt;I ran into &lt;a href="http://code.google.com/p/googlecl/"&gt;this Google Code project&lt;/a&gt; today via my tweeter feed. GoogleCL allowsthe nerd in me to interact directly with several Google services from a shellprompt. It includes interfaces to Blogger, Picasa, Calendar, Contacts, Docs,and YouTube. You can find several &lt;a href="http://code.google.com/p/googlecl/wiki/ExampleScripts"&gt;scripting examples&lt;/a&gt; under the project's Wiki. &lt;/p&gt;&lt;p&gt;The fact that this is a python script and it's open source is reallyinteresting to me. I am thinking that I need to integrate all of this into anEmacs mode.&lt;/p&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-416547025486809629?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/416547025486809629/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=416547025486809629' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/416547025486809629'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/416547025486809629'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2010/06/this-is-why-command-line-will-never-die.html' title='This is why the command line will never die'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-3142532274367940315</id><published>2010-06-12T16:56:00.000-07:00</published><updated>2010-06-12T16:57:23.457-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='CSharp'/><title type='text'>CSharp: Testing a Generic Class</title><content type='html'>&lt;p&gt;I just posted this question to &lt;a href="http://stackoverflow.com/questions/3030482/csharp-testing-a-generic-class"&gt;StackOverflow&lt;/a&gt; and I am repeating it here for posterity as the pastebin code expires after a month:&lt;/p&gt;&lt;p&gt;More than a question, per se, this is an attempt to compare noteswith other people. I wrote a generic History class that emulatesthe functionality of a browser's history. I am trying to wrap myhead around how far to go when writing unit tests for it. I amusing NUnit. Please share your testing approaches below.&lt;/p&gt;&lt;p&gt;The full code for the History class is at pastebin.com: &lt;a href="http://pastebin.com/ZGKK2V84"&gt;http://pastebin.com/ZGKK2V84&lt;/a&gt;. A full version of the code is also available below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;using System;&lt;br /&gt;using System.Collections.Generic;&lt;br /&gt;&lt;br /&gt;namespace Gorauskas.DataStructures {&lt;br /&gt;&lt;br /&gt;    /// &lt;summary&gt;&lt;br /&gt;    /// A history data structure that provides the same functionality&lt;br /&gt;    /// as a browser history, but allows you to use any type&lt;br /&gt;    /// &lt;/summary&gt;&lt;br /&gt;    /// &lt;typeparam name="T"&gt;The type parameter&lt;/typeparam&gt;&lt;br /&gt;    public class History&amp;lt;T&amp;gt; {&lt;br /&gt;&lt;br /&gt;        private Stack&amp;lt;T&amp;gt; _forward = new Stack&amp;lt;T&amp;gt;();&lt;br /&gt;        private Stack&amp;lt;T&amp;gt; _backward = new Stack&amp;lt;T&amp;gt;();&lt;br /&gt;&lt;br /&gt;        private T _current;&lt;br /&gt;&lt;br /&gt;        public History() { }&lt;br /&gt;&lt;br /&gt;        /// &lt;summary&gt;&lt;br /&gt;        /// This contructor set the Current pointer to an initial object of type T &lt;br /&gt;        /// &lt;/summary&gt;&lt;br /&gt;        /// &lt;param name="item"&gt;An item of type T&lt;/param&gt;&lt;br /&gt;        public History(T item) {&lt;br /&gt;            this._current = item;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        /// &lt;summary&gt;&lt;br /&gt;        /// Returns the current item that it is pointing to&lt;br /&gt;        /// Pushes the state of the current pointer into the backward stack&lt;br /&gt;        /// and sets the new current item. If the forward stack has items in it&lt;br /&gt;        /// then clear that too.&lt;br /&gt;        /// &lt;/summary&gt;&lt;br /&gt;        public T Current {&lt;br /&gt;            get {&lt;br /&gt;                return this._current;&lt;br /&gt;            }&lt;br /&gt;&lt;br /&gt;            set {&lt;br /&gt;                if(this.CanMoveForward)&lt;br /&gt;                    this._forward.Clear();&lt;br /&gt;&lt;br /&gt;                if (!(this._current == null))&lt;br /&gt;                    this._backward.Push(this._current);&lt;br /&gt;&lt;br /&gt;                this._current = value;&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        /// &lt;summary&gt;&lt;br /&gt;        /// Tells if the current pointer can be moved forward in history.&lt;br /&gt;        /// &lt;/summary&gt;&lt;br /&gt;        public bool CanMoveForward {&lt;br /&gt;            get { return this._forward.Count &amp;gt; 0; }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        /// &lt;summary&gt;&lt;br /&gt;        /// Tells if the current pointer can be moved backward in history.&lt;br /&gt;        /// &lt;/summary&gt;&lt;br /&gt;        public bool CanMoveBackward {&lt;br /&gt;            get { return this._backward.Count &amp;gt; 0; }&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        /// &lt;summary&gt;&lt;br /&gt;        /// Moves the current pointer one item back in history&lt;br /&gt;        /// &lt;/summary&gt;&lt;br /&gt;        /// &lt;returns&gt;The current item&lt;/returns&gt;&lt;br /&gt;        public T Back() {&lt;br /&gt;            if (this.CanMoveBackward) {&lt;br /&gt;                this._forward.Push(this._current);&lt;br /&gt;                this._current = this._backward.Pop();&lt;br /&gt;            }&lt;br /&gt;&lt;br /&gt;            return this._current;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        /// &lt;summary&gt;&lt;br /&gt;        /// Moves the current pointer one item forward in history&lt;br /&gt;        /// &lt;/summary&gt;&lt;br /&gt;        /// &lt;returns&gt;The current item&lt;/returns&gt;&lt;br /&gt;        public T Forward() {&lt;br /&gt;            if (this.CanMoveForward) {&lt;br /&gt;                this._backward.Push(this._current);&lt;br /&gt;                this._current = this._forward.Pop();&lt;br /&gt;            }&lt;br /&gt;            &lt;br /&gt;            return this._current;&lt;br /&gt;        }&lt;br /&gt;&lt;br /&gt;        /// &lt;summary&gt;&lt;br /&gt;        /// Adds the entire history in chronological order to a list of T&lt;br /&gt;        /// &lt;/summary&gt;&lt;br /&gt;        /// &lt;returns&gt;A ordered list of history items&lt;/returns&gt;&lt;br /&gt;        public List&amp;lt;T&amp;gt; Dump() {&lt;br /&gt;            List&amp;lt;T&amp;gt; l = new List&amp;lt;T&amp;gt;();&lt;br /&gt;&lt;br /&gt;            if (this.CanMoveForward) &lt;br /&gt;                l.AddRange(this._forward.ToList&amp;lt;T&amp;gt;().Reverse&amp;lt;T&amp;gt;());&lt;br /&gt;&lt;br /&gt;            if (!(this.Current == null)) &lt;br /&gt;                l.Add(this._current);&lt;br /&gt;&lt;br /&gt;            if (this.CanMoveBackward) &lt;br /&gt;                l.AddRange(this._backward.ToList&amp;lt;T&amp;gt;());&lt;br /&gt;&lt;br /&gt;            return l;&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-3142532274367940315?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/3142532274367940315/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=3142532274367940315' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/3142532274367940315'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/3142532274367940315'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2010/06/csharp-testing-generic-class.html' title='CSharp: Testing a Generic Class'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-2285382609436943763</id><published>2010-05-14T08:15:00.000-07:00</published><updated>2010-05-14T08:46:02.908-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='Emacs'/><title type='text'>Automating Emacs Build and Install from Source</title><content type='html'>&lt;p&gt;A little while back I &lt;a href="http://blog.theblinkingcursor.org/2010/02/building-and-installing-emacs-from.html"&gt;wrote up my notes&lt;/a&gt; on how to build and install Emacs from souce on Ubuntu.&lt;/p&gt;&lt;p&gt;I have now automated the task in the form of the crude script provided below. The script takes one parameter: &lt;code&gt;gui&lt;/code&gt;. This parameter tells the build whether you intend to do a GUI or command line only build of Emacs. It also writes out some messages to a file called &lt;code&gt;emacs-build.log&lt;/code&gt; ... Enjoy!&lt;/p&gt;&lt;pre&gt;&lt;code&gt;#! /bin/bash&lt;br /&gt;echo "Building @`date`" | tee -a ~/emacs-build.log&lt;br /&gt;mkdir ~/emacs-src&lt;br /&gt;cd ~/emacs-src&lt;br /&gt;&lt;br /&gt;echo "Installing pre-requisites" | tee -a ~/emacs-build.log&lt;br /&gt;apt-get -q -y install build-essential gcc git-core texinfo libncurses5-dev &lt;br /&gt;&lt;br /&gt;if [ "$1" = gui ]; then&lt;br /&gt;    echo "Installing GUI pre-requisites" | tee -a ~/emacs-build.log&lt;br /&gt;    apt-get -q -y install libgtk2.0-dev libtiff4-dev libgif-dev libjpeg62-dev libpng12-dev libxpm-dev&lt;br /&gt;fi&lt;br /&gt;&lt;br /&gt;echo "Cloning Emacs Git Repo" | tee -a ~/emacs-build.log&lt;br /&gt;git clone git://git.savannah.gnu.org/emacs.git&lt;br /&gt;&lt;br /&gt;cd ./emacs&lt;br /&gt;&lt;br /&gt;echo "Configuring build" | tee -a ~/emacs-build.log&lt;br /&gt;if [ "$1" = gui ]; then&lt;br /&gt;    ./configure&lt;br /&gt;else&lt;br /&gt;    ./configure --without-x&lt;br /&gt;fi&lt;br /&gt;&lt;br /&gt;echo "Building source code" | tee -a ~/emacs-build.log&lt;br /&gt;make&lt;br /&gt;echo "Installing emacs" | tee -a ~/emacs-build.log&lt;br /&gt;make install&lt;br /&gt;echo "Clean up" | tee -a ~/emacs-build.log&lt;br /&gt;cd ~/&lt;br /&gt;rm -rf ~/emacs-src&lt;br /&gt;echo "All Done!" | tee -a ~/emacs-build.log&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-2285382609436943763?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/2285382609436943763/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=2285382609436943763' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/2285382609436943763'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/2285382609436943763'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2010/05/automating-emacs-build-and-install-from.html' title='Automating Emacs Build and Install from Source'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-4267816926805358365</id><published>2010-03-26T07:32:00.000-07:00</published><updated>2010-03-26T07:34:19.898-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='IronPython'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><title type='text'>Generate .NET Assemblies from Iron Python</title><content type='html'>The other day I was talking to a fellow programmer and the question of compiling Iron Python code into .NET assemblies came up. So what if you have an Iron Python script that you want to run and then have the ipy interpreter output an assembly that you can run on other machines. How do you do that? &lt;br /&gt;&lt;br /&gt;There are several ways to approach the problem. One way is to use an IDE, but IDE support for Iron Python is still a bit lacking. One IDE that provides Iron Python great support is &lt;a href="http://www.icsharpcode.net/opensource/sd/"&gt;SharpDevelop&lt;/a&gt;. In SD you can create a Iron Python project, write your code as you normally would and then build your project. The compile assemblies can then be found in the build output folders for that project.&lt;br /&gt;&lt;br /&gt;The other way to do this is through a tool that ships with IronPython called Pyc or the Python Command-Line Compiler. If you installed the latest version 2.6 of IronPython, then &lt;code&gt;pyc.py&lt;/code&gt; will be available at &lt;code&gt;C:\Program Files (x86)\IronPython 2.6\Tools\Scripts&lt;/code&gt; or wherever you installed IronPython on your system. If you have earlier versions of IronPython then &lt;code&gt;pyc.py&lt;/code&gt; will be available as a separate download in the samples package.&lt;br /&gt;&lt;br /&gt;With &lt;code&gt;pyc.py&lt;/code&gt; you can create console or Windows assemblies from your python scripts. Basic usage looks like this:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;ipy pyc.py /out:myprogram.exe /main:mainfile.py /target:exe &lt;br /&gt;    program.py support.py&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;The above will generate an assembly called &lt;code&gt;myprogram.exe&lt;/code&gt; (&lt;code&gt;/out&lt;/code&gt;) which is a console application (&lt;code&gt;/target&lt;/code&gt;) and will execute the code in &lt;code&gt;mainfile.py&lt;/code&gt; first (&lt;code&gt;/main&lt;/code&gt;) and will also include code from &lt;code&gt;program.py&lt;/code&gt; and &lt;code&gt;support.py&lt;/code&gt; in the assembly.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-4267816926805358365?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/4267816926805358365/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=4267816926805358365' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/4267816926805358365'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/4267816926805358365'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2010/03/generate-net-assemblies-from-iron.html' title='Generate .NET Assemblies from Iron Python'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-3663800814031694550</id><published>2010-02-26T01:29:00.000-08:00</published><updated>2010-02-26T01:34:57.138-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Great Quotes'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='Cool Stuff'/><title type='text'>Postel's Robustness Principle</title><content type='html'>&lt;p&gt;Interesting comment from the trenches:&lt;/p&gt;&lt;blockquote&gt;After much testing, it's clear that Postel's advice to protocol designers ("be liberal in what you accept, and conservative in what you send") invites a natural-law repercussion for JS as "protocol": &lt;br/&gt;&lt;br/&gt;"If you are liberal in what you accept, others will utterly fail to be conservative in what they send."&lt;/blockquote&gt;&lt;p&gt;Found here: &lt;a href="http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp#1464"&gt;http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp#1464&lt;/a&gt; while looking at &lt;a href="http://en.wikipedia.org/wiki/SpiderMonkey_(JavaScript_engine)"&gt;SpiderMonkey&lt;/a&gt; source code.&lt;/p&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-3663800814031694550?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/3663800814031694550/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=3663800814031694550' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/3663800814031694550'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/3663800814031694550'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2010/02/postels-robustness-principle.html' title='Postel&apos;s Robustness Principle'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-6922824955173140012</id><published>2010-02-22T21:13:00.000-08:00</published><updated>2010-05-17T01:10:38.346-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Hardware'/><category scheme='http://www.blogger.com/atom/ns#' term='Web Server'/><title type='text'>VMWare Server Doesn't Start After Upgrade</title><content type='html'>&lt;p&gt;I have a Xubuntu 9.04 machine that is hosting some VMs running on VMWare Server. I recently upgraded a bunch of packages on the host machine and then I noticed that the VMWare Server was not starting automatically anymore. I tried running it manually and I got the error message: &lt;i&gt;vmware is installed, but it has not been (correctly) configured for this system&lt;/i&gt;. &lt;/p&gt;&lt;p&gt;What happened is that one of the upgraded packages was the Linux Kernel and a new Kernel version will break VMWare because it originally compiled for the previous Kernel version that was on the machine. To fix this I had to run the &lt;code&gt;/usr/bin/vmware-config.pl&lt;/code&gt; script to reconfigure and recompile several components. After running the script, VMWare server started up again as normal. &lt;/p&gt;&lt;p&gt;Let me know if you had this problem before. &lt;/p&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-6922824955173140012?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/6922824955173140012/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=6922824955173140012' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/6922824955173140012'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/6922824955173140012'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2010/02/vmware-server-doesnt-start-after.html' title='VMWare Server Doesn&apos;t Start After Upgrade'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-7328726588144362317</id><published>2010-02-21T21:51:00.000-08:00</published><updated>2010-02-21T21:59:49.077-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Web Server'/><category scheme='http://www.blogger.com/atom/ns#' term='Emacs'/><title type='text'>Building and Installing Emacs from Source on Ubuntu</title><content type='html'>&lt;p&gt;Every so often I have to setup a web development server and one of thefirst things I have to have on that server is Emacs. As an Emacsfanatic, I need to have the very latest bleeding-edge version. Inorder to ensure that, I clone the official git repository into my homedirectory and then I compile and build from there. Most of the time Iwill be performing the steps below on a Ubuntu Server distribution(these work on versions 8.10, 9.04, and 9.10) without X installed. &lt;/p&gt;&lt;ol&gt;&lt;li&gt;I will assume you already have your Ubuntu server up and running.&lt;/li&gt;&lt;li&gt;Install some packages needed for the build by running the following command:&lt;/li&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;    sudo apt-get install build-essentials gcc git-core texinfo \&lt;br /&gt;    libncurses5-dev &lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;li&gt;Clone the latest Emacs from the GNU git repository by running this: &lt;/li&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;    git clone git://git.savannah.gnu.org/emacs.git&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;li&gt;Configure, compile and install Emacs by running the following commands:  &lt;/li&gt;&lt;pre&gt;&lt;code&gt;    &lt;br /&gt;    cd ./emacs&lt;br /&gt;    sudo ./configure --without-x&lt;br /&gt;    sudo make&lt;br /&gt;    sudo make install&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/ol&gt;&lt;p&gt;Some notes: The need for the build-essentials, gcc, and git-core arepretty obvious; the texinfo package is needed for the makeinfodependency; and the libncurses5-dev is needed for the &lt;a href="http://blog.theblinkingcursor.org/2009/08/emacs-cannot-open-termcap-database-file.html"&gt;termcap.h&lt;/a&gt;dependency. &lt;/p&gt;&lt;p&gt;The above will also work on a desktop distro, but you will be limitedto a terminal version of Emacs. In order to install a graphical versionof Emacs you will also need to install the following extra packages:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;   &lt;br /&gt;    sudo apt-get install libgtk2.0-dev libtiff4-dev libgif-dev \&lt;br /&gt;    libjpeg62-dev libpng12-dev libxpm-dev&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The above line will also install a bunch of other dependencies neededby the libraries. Don't forget to also remove the --without-xparameter and run just this line: &lt;/p&gt;&lt;pre&gt;&lt;code&gt;   &lt;br /&gt;    sudo ./configure&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let me know how it works for you.&lt;/p&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-7328726588144362317?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/7328726588144362317/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=7328726588144362317' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/7328726588144362317'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/7328726588144362317'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2010/02/building-and-installing-emacs-from.html' title='Building and Installing Emacs from Source on Ubuntu'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-7454597983565986189</id><published>2010-01-16T10:40:00.000-08:00</published><updated>2010-01-16T12:34:46.827-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><title type='text'>Some Notes on Serializing Objects in Python</title><content type='html'>&lt;p&gt;I was playing with .NET serialization at work the other day and gotcurious about how Python does it. Serialization is a little confusingin the .NET world, but it's not an insurmountable task to graspit. For one, there is more than a single implementation of serializationwithin the .NET base class library, or namely, System.Xml.Serialization andSystem.Runtime.Serialization, which respectively implement XML andbinary serialization. The techniques used in each implementation arealso disparate, having the binary serialization make heavy use ofclass attributes, while the XML implementation uses a method call toXmlSerializer.Serialize. &lt;p&gt;&lt;/p&gt;The Python implementation of serialization is much simpler, conciseand easier to understand. It is implemented as a Standard Librarymodule called Pickle. The actions to serialize and deserialize classesare implemented as simple function class and there is no need to putattributes on classes. Let's see how it works.&lt;p&gt;&lt;/p&gt;First import the pickle module and then declare a class called Personas in the code below:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;  import pickle&lt;br /&gt;&lt;br /&gt;  class Person(object):&lt;br /&gt;    &lt;br /&gt;      def __init__(self, first_name=None, last_name=None, age=None):&lt;br /&gt;          self.first_name = first_name&lt;br /&gt;          self.last_name = last_name&lt;br /&gt;          self.age = age&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now create two instances of the Person class above and place them in alist. &lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;  p1 = Person('Jane', 'Doe', 26)&lt;br /&gt;  p2 = Person('John', 'Hancock', 33)&lt;br /&gt;  people = []&lt;br /&gt;  people.append(p1)&lt;br /&gt;  people.append(p2)&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Next serialize the list to a file and then read it back into a newlist. First serialize the list:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;  fname = 'peoplelist.dat'&lt;br /&gt;  f1 = open(fname, 'wb')&lt;br /&gt;  pickle.dump(people, f1)&lt;br /&gt;  f1.close()&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, read the contents of the serialized file back into a new listand print out the name and age of each person:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;  f2 = open(fname)&lt;br /&gt;  new_people = pickle.load(f2)&lt;br /&gt;  for person in new_people:&lt;br /&gt;      print '%s %s is %d years old.' % (person.first_name, person.last_name, person.age)&lt;br /&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;That's it... Serialization in Python is just too easy!&lt;/p&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-7454597983565986189?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/7454597983565986189/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=7454597983565986189' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/7454597983565986189'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/7454597983565986189'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2010/01/some-notes-on-serializing-objects-in.html' title='Some Notes on Serializing Objects in Python'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-6171819525368121201</id><published>2010-01-16T01:16:00.000-08:00</published><updated>2010-01-16T01:17:43.851-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='Python'/><title type='text'>Some thoughts on Python and Unladen Swallow</title><content type='html'>&lt;p&gt;Between Twitter and the blogosphere, I have been hearing a lot about &lt;a href="http://code.google.com/p/unladen-swallow/"&gt;Unladen Swallow&lt;/a&gt; lately. For those who don't know, Unladen Swallow is an experimental &lt;i&gt;&lt;b&gt;branch&lt;/b&gt;&lt;/i&gt; of Python that aims at improving performance of the language. In their own words, Unladen Swallow is &lt;i&gt;"An optimization branch of CPython, intended to be fully compatible and significantly faster."&lt;/i&gt;&lt;/p&gt;&lt;p&gt;I wanted to find out more and started reading their &lt;a href="http://code.google.com/p/unladen-swallow/wiki/ProjectPlan"&gt;Project Plan&lt;/a&gt; page on Google Code. I think their goals are commendable, as you may see for yourself, and number 5 below explains why I added bold face the word &lt;i&gt;branch&lt;/i&gt; above:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Produce a version of Python at least 5x faster than CPython.&lt;/li&gt;&lt;li&gt;Python application performance should be stable.&lt;/li&gt;&lt;li&gt;Maintain source-level compatibility with CPython applications.&lt;/li&gt;&lt;li&gt;Maintain source-level compatibility with CPython extension modules.&lt;/li&gt;&lt;li&gt;We do not want to maintain a Python implementation forever; we view our work as a branch, not a fork. &lt;/li&gt;&lt;/ol&gt;&lt;p&gt;This is all fine and dandy, and the list above has made the rounds on the blogs. But what does it all mean? What follows is my impressions of the most important points that the Unladen Swallow branch is addressing.&lt;/p&gt;&lt;h4&gt;A New Virtual Machine&lt;/h4&gt;&lt;p&gt;The goal is to eventually replace the Python 2.6.1 virtual machine with a just-in-time compiler built for the &lt;a href="http://llvm.org/"&gt;LLVM&lt;/a&gt;. The rest of the Python runtime would be left untouched. The key benefits of this approach are that is a register-based machine and those perform better than stack machines, which is what the current Python VM is implemented as.&lt;/p&gt;&lt;p&gt;The internals of the implementation will assume at the outset that the machine has multiple cores. For instance, very aggressive optimization of code is assigned to a secondary cores while compilation occurs on other cores. The garbage collector for Unladen Swallow will also be implemented to utilize multiple cores.&lt;/p&gt;&lt;h4&gt;The Global Interpreter Lock&lt;/h4&gt;&lt;p&gt;While Python has had threading for a while, it is not a true multi-threading implementation. This is because of the existence of the GIL. &lt;a href="http://www.dabeaz.com/"&gt;Dave Beazley&lt;/a&gt; has written about the &lt;a href="http://www.dabeaz.com/python/GIL.pdf"&gt;GIL and how it works&lt;/a&gt; several times and you should read his &lt;i&gt;&lt;a href="http://www.dabeaz.com/blog/2010/01/python-gil-visualized.html"&gt;"The Python GIL Visualized"&lt;/a&gt;&lt;/i&gt; article to find out more about why the GIL keeps Python from having a real multi-threaded runtime.&lt;/p&gt;&lt;p&gt;I bring up the GIL here because the folks working on Unladen Swallow plan on removing the GIL from Python, although they are not very optimistic about it. And even if they are not able to remove the GIL completely there may be other optimizations in the garbage collector reference counting mechanism that may yield some improvements in the threading area.&lt;/p&gt;&lt;p&gt;Anyway, these are the two major points I take away from the Unladen Swallow plan of record. These changes seem pretty big to me and a major risk of doing this kind of work is that your changes are rejected by the community. However, the Unladen Swallow team is sponsored by Google who also employs Guido, so I'm sure that those guys are talking amongst themselves.&lt;/p&gt;&lt;p&gt;Thanks for reading this, go read the &lt;a href="http://code.google.com/p/unladen-swallow/wiki/ProjectPlan"&gt;project plan&lt;/a&gt; and let me know what you think.&lt;/p&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-6171819525368121201?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/6171819525368121201/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=6171819525368121201' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/6171819525368121201'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/6171819525368121201'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2010/01/some-thoughts-on-python-and-unladen.html' title='Some thoughts on Python and Unladen Swallow'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-8643685078823910657</id><published>2009-12-30T17:30:00.000-08:00</published><updated>2009-12-30T17:35:00.339-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Commentary'/><title type='text'>Some thoughts on content distribution</title><content type='html'>The other day I was looking through the Zune Marketplace and I found a listing for &lt;i&gt;&lt;a href="http://www.thisamericanlife.org/"&gt;This American Life&lt;/a&gt;&lt;/i&gt;, which I promptly subscribed to. &lt;i&gt;This American Life&lt;/i&gt; is simply the best radio show ever made.&lt;br /&gt;&lt;br /&gt;But that's beside the point. Listed in both the Zune Marketplace and the iTunes store, one can easily find several &lt;a href="http://www.npr.org/"&gt;NPR&lt;/a&gt; programs. The likes of &lt;i&gt;&lt;a href="http://www.sciencefriday.com/"&gt;Science Friday&lt;/a&gt;&lt;/i&gt;, &lt;i&gt;&lt;a href="http://www.npr.org/templates/story/story.php?storyId=5"&gt;Talk of the Nation&lt;/a&gt;&lt;/i&gt;, and &lt;i&gt;&lt;a href="http://www.npr.org/templates/story/story.php?storyId=2"&gt;All Things Considered&lt;/a&gt;&lt;/i&gt; are listed among several compilation (or aggregation) streams such as the &lt;i&gt;Hourly News Summary&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;In addition to their presence in the Zune and iTunes stores, NPR is also streaming live from their website. You can even setup the online player to manage a customized playlist for you. This is one of the most advanced approaches to content distribution that any major organization is doing today.&lt;br /&gt;&lt;br /&gt;I think that NPR must have resisted this tooth-and-nail for a while, but the writing has been on the wall and they were able to read it before it's too late. You see, the way that NPR works (or worked?) is basically a franchise model, where the local stations put on fund drives to pay for their programming subscription dues to headquarters in Washington, DC every year. By going online the way that NPR is doing it, they are basically disintermediating the local affiliate stations and, consequently, shutting down that revenue stream.&lt;br /&gt;&lt;br /&gt;I have to commend the people in charge at NPR for promoting this change. For one, it takes balls to do it. There are several organizations that would never compromise a revenue stream in this way. Someone up high in the NPR echelons must have said "sorry stations, but this is the future, it's gonna happen, so we're gonna do it."&lt;br /&gt;&lt;br /&gt;I think that NPR is in the forefront of a fundamental change in how media and content is distributed.&lt;br /&gt;&lt;br /&gt;This is a perfect example of a business (a non-profit business, but still a business) who's facing a fundamental change in the way that it operates and they are fully engaged and embracing this change. I wish more businesses had the foresight and intestinal fortitude to do what NPR is doing. Yes, newspapers and record companies, I am looking at you.&lt;br /&gt;&lt;br /&gt;All in all, I am really glad to be living in a time where I get to see all of these technologies play out in the marketplace.&lt;br /&gt;&lt;br /&gt;Am I on the right track? Let me know what you think below.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-8643685078823910657?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/8643685078823910657/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=8643685078823910657' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/8643685078823910657'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/8643685078823910657'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/12/some-thoughts-on-content-distribution.html' title='Some thoughts on content distribution'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-6780488684492565526</id><published>2009-11-20T01:04:00.000-08:00</published><updated>2009-11-20T01:09:26.932-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='Cool Stuff'/><title type='text'>AfterThought - Visual Studio 2008 Color Themes</title><content type='html'>I've seen some great color themes for Visual Studio out there, but none of them appealed to me all that much, so I designed my own themes. I call them AfterThought Dark and AfterThought Light. The goal was to achieve something that was easy on the eyes. Something that provided a good degree of contrast and readability without being too saturated. Eventually, I will also have Emacs color themes made from these. Anyway, I included below a couple of screenshots and you can download them at the &lt;a href="http://github.com/gorauskas/programmingcolorthemes"&gt;Github&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.flickr.com/photos/gorauskas/4119473952/" title="VS2008 AfterThought Dark Theme by gorauskas, on Flickr"&gt;&lt;img src="http://farm3.static.flickr.com/2571/4119473952_ddb891ffba.jpg" width="500" height="301" alt="VS2008 AfterThought Dark Theme" /&gt;&lt;br /&gt;&lt;code&gt;Figure 1 - AfterThought Dark&lt;/code&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;a href="http://www.flickr.com/photos/gorauskas/4118703263/" title="VS2008 AfterThought Light Theme by gorauskas, on Flickr"&gt;&lt;img src="http://farm3.static.flickr.com/2499/4118703263_3b80b8247d.jpg" width="500" height="307" alt="VS2008 AfterThought Light Theme" /&gt;&lt;br /&gt;&lt;code&gt;Figure 2 - AfterThought Light&lt;/code&gt;&lt;/a&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-6780488684492565526?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/6780488684492565526/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=6780488684492565526' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/6780488684492565526'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/6780488684492565526'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/11/afterthought-visual-studio-2008-color.html' title='AfterThought - Visual Studio 2008 Color Themes'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-8884532360666116505</id><published>2009-11-16T00:14:00.000-08:00</published><updated>2009-11-16T00:17:20.872-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Commentary'/><category scheme='http://www.blogger.com/atom/ns#' term='Links'/><title type='text'>New Tumblelog</title><content type='html'>I started a new tumblelog at &lt;a href="http://standardout.tumblr.com/"&gt;http://standardout.tumblr.com/&lt;/a&gt; for short tidbits of information that I need to keep track of. My thinking, which is not yet concrete, is that I need a blog for longer pieces (this one) and another just for notes... Still thinking about the logistics and may shuffle the domains around a bit for optimum output.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-8884532360666116505?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/8884532360666116505/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=8884532360666116505' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/8884532360666116505'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/8884532360666116505'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/11/new-tumblelog.html' title='New Tumblelog'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-8226514749942247788</id><published>2009-11-15T11:30:00.000-08:00</published><updated>2009-11-15T23:17:00.355-08:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><title type='text'>A Great Use For Lambdas in C#</title><content type='html'>If you are writing a console application in C# that has to write a lot of output from different places in your code, then that's is one situation that illustrates a great use for lambda expression.&lt;br /&gt;&lt;br /&gt;Consider the following code:&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;&lt;pre&gt;static Action&amp;lt;object&amp;gt; WL = obj =&gt; Console.WriteLine(obj);&lt;/pre&gt;&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;What's happening in the above line of code is that you declared a &lt;code&gt;System.Action&amp;lt;T&amp;gt;&lt;/code&gt; delegate that expects a &lt;code&gt;T&lt;/code&gt;, or an &lt;code&gt;object&lt;/code&gt; in our case, as a parameters and returns a &lt;code&gt;void&lt;/code&gt;. You then assigned a lambda expression to that delegate in the format of &lt;code&gt;obj =&gt; Console.WriteLine(obj)&lt;/code&gt;. Now, every time you need to write out some text to the console, all you have to do is call &lt;code&gt;WL("some text")&lt;/code&gt;, and that saves you from writing &lt;code&gt;Console.WriteLine("some text")&lt;/code&gt; all the time.&lt;br /&gt;&lt;br /&gt;If you have other examples of the uses for lambdas or find anything wrong with this post, I would love to hear it.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-8226514749942247788?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/8226514749942247788/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=8226514749942247788' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/8226514749942247788'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/8226514749942247788'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/11/great-use-for-lambdas-in-c.html' title='A Great Use For Lambdas in C#'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-7996425112024231127</id><published>2009-10-21T11:39:00.000-07:00</published><updated>2009-10-21T18:55:01.682-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Commentary'/><title type='text'>Internationalization and Startups</title><content type='html'>&lt;a href="http://collison.ie/"&gt;Patrick Collison&lt;/a&gt; (of &lt;a href="http://auctomatic.com/"&gt;Auctomatic&lt;/a&gt; fame) wrote up a &lt;a href="http://collison.ie/blog/2009/10/surprises"&gt;post&lt;/a&gt; about what surprised him the most about doing his own startup. Here's a small pearl of wisdom from that post that resonated with me:&lt;br /&gt;&lt;br /&gt;&lt;blockquote&gt;Internationalization is an underexploited axis—people try to expand on the x-y plane, and ignore this third dimension. We grew our iPhone app revenue by over 200% through internationalization. The biggest competitve advantage we ever had with Auctomatic was supporting the obscure international eBay sites that the big US players ignored. I’m generalizing from pretty limited experience, but if I were a floundering start-up trying to get to cashflow positive, internationalizing is probably the first trick I’d try.&lt;/blockquote&gt;&lt;br /&gt;&lt;br /&gt;This is such a no brainer, yet you see very few startups courting international markets. Sure, there may be certain local regulations to abide by in certain markets, but most of the social stuff startups put out there today will not raise the eyebrows of most regulatory agencies in the western hemisphere. Case in point is &lt;a href="http://www.orkut.com/"&gt;Orkut&lt;/a&gt;... Have you heard of them? They are huge in Brazil.&lt;br /&gt;&lt;br /&gt;The other issue that comes to mind regarding internationalization is payment processing. If you accept credit cards for your services, this is generally a non-issue as rates are exchanged automatically. You will probably have to deal more with the domestic credit card companies trying to minimize fraud than you will have to deal with any particular issues from international customers. Also, if you are selling a physical good, then shipping internationally is not really that different than shipping domestically.&lt;br /&gt;&lt;br /&gt;Anyway, I thought it was a great insight that got me to do some thinking of my own...&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-7996425112024231127?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='related' href='http://collison.ie/blog/2009/10/surprises' title='Internationalization and Startups'/><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/7996425112024231127/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=7996425112024231127' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/7996425112024231127'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/7996425112024231127'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/10/internationalization-and-startups.html' title='Internationalization and Startups'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-2282941806911988065</id><published>2009-10-21T02:16:00.000-07:00</published><updated>2009-10-21T02:20:18.210-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Great Quotes'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><title type='text'>Nickel's Worth</title><content type='html'>&lt;blockquote&gt;Whereas Europeans generally pronounce my name the right way ('Nick-louse Veert'), Americans invariably mangle it into 'Nickel's Worth.' This is to say that Europeans call me by name, but Americans call me by value.&lt;br /&gt;&lt;br /&gt;-- Niklaus Wirth&lt;br /&gt;&lt;/blockquote&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-2282941806911988065?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/2282941806911988065/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=2282941806911988065' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/2282941806911988065'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/2282941806911988065'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/10/nickels-worth.html' title='Nickel&apos;s Worth'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-5961934524489163754</id><published>2009-08-16T22:39:00.000-07:00</published><updated>2009-08-16T22:48:29.144-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Emacs'/><title type='text'>Emacs: Cannot open termcap database file</title><content type='html'>I recently created a virtual machine running Ubuntu Server 9.04. I downloaded Emacs from CVS and proceeded to configure, build and install it from source in that little VM of mine. Then when I went to run Emacs, I got the error &lt;span style="font-style:italic;"&gt;"Cannot open termcap database file."&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;You may be interested to know that this is actually a common problem in a &lt;span style="font-style:italic;"&gt;No X&lt;/span&gt; installation of Ubuntu Server. There is an easy fix for this problem: install the package &lt;span style="font-style:italic;"&gt;libncurses5-dev&lt;/span&gt; which will provide the file &lt;span style="font-style:italic;"&gt;termcap.h&lt;/span&gt;. Then compile Emacs again and everything should work normally with it as the default editor in your server.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-5961934524489163754?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/5961934524489163754/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=5961934524489163754' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/5961934524489163754'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/5961934524489163754'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/08/emacs-cannot-open-termcap-database-file.html' title='Emacs: Cannot open termcap database file'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-6288908418033414678</id><published>2009-08-12T22:30:00.000-07:00</published><updated>2009-08-12T22:45:47.864-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Cool Stuff'/><title type='text'>Rastafarian Software</title><content type='html'>This is an instant classic. Rasta Code:&lt;pre&gt;    while (love &amp; passion) {&lt;br /&gt;        for (fight = 0; rights &lt; freedom; rights++) {&lt;br /&gt;            fight = standup(rights);&lt;br /&gt;        }&lt;br /&gt;        free(babylon);&lt;br /&gt;    }&lt;/pre&gt;&lt;br /&gt;Check it out here: &lt;a href="http://rastasoft.org/"&gt;http://rastasoft.org/&lt;/a&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-6288908418033414678?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/6288908418033414678/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=6288908418033414678' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/6288908418033414678'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/6288908418033414678'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/08/rastafarian-software.html' title='Rastafarian Software'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-275312067126341598</id><published>2009-08-10T22:13:00.000-07:00</published><updated>2009-08-12T23:21:25.510-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Commentary'/><title type='text'>Response to Jason Calacanis Essay - The Case Against Apple</title><content type='html'>Today I was reading an &lt;a href="http://calacanis.com/2009/08/08/the-case-against-apple-in-five-parts/"&gt;essay&lt;/a&gt; that &lt;a href="http://en.wikipedia.org/wiki/Jason_Calacanis"&gt;Jason Calacanis&lt;/a&gt; wrote and distributed to his &lt;a href="http://bit.ly/11w4BK"&gt;mailing list&lt;/a&gt;. Fortunately, he posted the piece on his blog also. I have signed up for the list and will be receiving new installments on my inbox. &lt;br /&gt;&lt;br /&gt;I think that Jason hit the nail right on the head with the essay. Apple is becoming &lt;span style="font-style:italic;"&gt;Evil&lt;/span&gt; and they are &lt;span style="font-style:italic;"&gt;"cramping everyone's style,"&lt;/span&gt; as Jason so eloquently puts it. I recommend you read the full essay for all of the details, as Jason has a clear and concise style for getting his point across.&lt;br /&gt;&lt;br /&gt;The reason I am posting this entry is because Jason has 3 questions to ask his readers at the end of the essay. Here are my answers:&lt;ol&gt;&lt;br /&gt;&lt;li&gt;&lt;span style="font-style:italic;"&gt;Do you think Apple would be more, or less, successful if they adopted a more open strategy (i.e. allowing other MP3 players in iTunes)?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;The short answer, from a consumer point-of-view, is that I think Apple would be more successful by being more open. &lt;br /&gt;&lt;br /&gt;However, Apple is a very large company ($147 billion according to Google finance) and steering the company in a new direction is like steering an oil tanker, it takes time, patience and effort, no matter how competent you may be. This is true for every large company, but sometimes big companies can be a lot more agile than we imagine.&lt;br /&gt;&lt;br /&gt;If I was at the realm at Apple, I would push this situation all the way to the tipping point and try to get the most out of it. Then when the DOJ comes knocking, I would rush to settle the situation with a deal. This &lt;span style="font-style:italic;"&gt;modus operandi&lt;/span&gt; has been used before by Intel and others and most of the companies that tried it got away with just a slap on the wrist.&lt;/li&gt;&lt;br /&gt;&lt;br /&gt;&lt;li&gt;&lt;span style="font-style:italic;"&gt;Do you think Apple should face serious antitrust action?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Absolutely, and I don't think that Apple will change their behavior until the Department of Justice gets involved.&lt;/li&gt;&lt;br /&gt;&lt;br /&gt;&lt;li&gt;&lt;span style="font-style:italic;"&gt;Do you think Apple’s dexterity and competence forgive their bad behavior?&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Absolutely not, but I do think that those characteristics will serve them well when they need to placate the ire of the Attorney General of the United States. And it'll also allow them to quickly implement any changes based on any deals with the DOJ.&lt;/li&gt;&lt;br /&gt;&lt;/ol&gt;Thanks, and don't forget to read Jason's essay.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-275312067126341598?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/275312067126341598/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=275312067126341598' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/275312067126341598'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/275312067126341598'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/08/response-to-jason-calacanis-essay-case.html' title='Response to Jason Calacanis Essay - The Case Against Apple'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-545711637006742231</id><published>2009-08-10T02:47:00.000-07:00</published><updated>2009-08-12T23:19:03.675-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Cool Stuff'/><title type='text'>Launchy: Game Changer</title><content type='html'>Context switching is the productive killer. Every time I have to reach for the trackball while I'm engrossed in a task that requires the keyboard, I lose whatever focus I had on that task. The few fractions of a second that it takes to reach the trackball are irrelevant. The change in context is the actual killer of my productivity. &lt;br /&gt;&lt;br /&gt;That's one reason why I love Emacs and won't use any other text editor. Emacs is a modeless text editor and you can accomplish any task in it by using certain key chords in your keyboard, which translates to a completely mouse free experience. I have spent much time thinking about how to translate the Emacs experience to the whole graphical user interface paradigm and the answer has been staring me in the face the whole time.&lt;br /&gt;&lt;br /&gt;So the question has been &lt;span style="font-style:italic;"&gt;"How can I be most efficient in a graphical desktop environment?"&lt;/span&gt; and I have known that the answer was to get rid of the mouse since I started using Emacs several years ago. But how do you do that... The pillar of the desktop paradigm is the pointing device. I think I found the answer and it's a type of utility called the &lt;span style="font-style:italic;"&gt;&lt;a href="http://en.wikipedia.org/wiki/Comparison_of_application_launchers"&gt;Application Launcher&lt;/a&gt;&lt;/span&gt;.&lt;br /&gt;&lt;br /&gt;My recent epiphany was pure luck: Windows 7 does away with the Quick Launch toolbar as I known it up to Windows Vista. In retrospect, the quick launch toolbar paradigm couldn't be more inefficient: miniscule 16 by 16 pixel icons lined up on a toolbar that's not much bigger. Talk about a violation of &lt;a href="http://en.wikipedia.org/wiki/Fitt%27s_Law"&gt;Fitt's Law&lt;/a&gt;. I was too addicted to the quick launch paradigm to be able to accept and use anything else, but Windows 7 forced me to find an alternative. &lt;br /&gt;&lt;br /&gt;Launcher tools have been around for a while and the first time I heard of them was in an article about &lt;a href="http://docs.blacktree.com/quicksilver/what_is_quicksilver"&gt;QuickSilver&lt;/a&gt; for OS X. There are definitely variations on the application launcher theme and I even installed &lt;a href="http://do.davebsd.com/"&gt;Gnome Do&lt;/a&gt; on a Linux laptop I had laying around a little while back. So I installed &lt;a href="http://www.launchy.net/"&gt;Launchy&lt;/a&gt; (it seems to be the most popular launcher for Windows) on my Windows 7 work laptop and decided to give it a real try.&lt;br /&gt;&lt;br /&gt;It took about an hour of using Launchy on my work laptop running Windows 7 to shift to the &lt;span style="font-style:italic;"&gt;Application Launcher&lt;/span&gt; paradigm and be amazed at the results. It's been a few days and I am still learning all that Launchy can offer, but one thing is certain: there is a great likelihood that Launchy will completely change the way I work and interact with a computer from now on. &lt;br /&gt;&lt;br /&gt;There is a small amount of configuration and setup that you can do to Launchy to teach it where to look for your stuff. Launchy has a concept of a &lt;span style="font-style:italic;"&gt;Catalog&lt;/span&gt;, which is a collection of locations and file types that it will look at when you want to accomplish something.  If Launchy is missing a feature you need, you are empowered to write your own Launchy plugin and fix your problem right then and there.&lt;br /&gt;&lt;br /&gt;Launchy also uses a &lt;span style="font-style:italic;"&gt;Verb/Subject&lt;/span&gt; analogy to accomplish useful things. For instance, use the &lt;span style="font-style:italic;"&gt;Alt&lt;/span&gt; and &lt;span style="font-style:italic;"&gt;Spacebar&lt;/span&gt; keystroke to bring up Launchy, then type in &lt;span style="font-style:italic;"&gt;"fire"&lt;/span&gt; for &lt;span style="font-style:italic;"&gt;Firefox&lt;/span&gt; and hit the &lt;span style="font-style:italic;"&gt;Tab&lt;/span&gt; key. Then type in the URL &lt;span style="font-style:italic;"&gt;twitter.com&lt;/span&gt; and hit &lt;span style="font-style:italic;"&gt;Enter&lt;/span&gt;. This launches Firefox on twitter.com. You can do the same thing to open a file in Emacs. And you never leave the keyboard.&lt;br /&gt;&lt;br /&gt;I am sure there are ways to activate the Quick Launch toolbar in Windows 7, but I'm glad that I decided to give a Launchy a real try. I am pleasantly surprised by the results so far.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-545711637006742231?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/545711637006742231/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=545711637006742231' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/545711637006742231'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/545711637006742231'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/08/launchy-game-changer.html' title='Launchy: Game Changer'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-7015511470171708773</id><published>2009-06-30T22:10:00.000-07:00</published><updated>2009-08-07T16:24:33.951-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Quick Hacks'/><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><category scheme='http://www.blogger.com/atom/ns#' term='Emacs'/><title type='text'>Emacs as the Visual Studio Editor</title><content type='html'>There is a great little hack that I just found out about &lt;a href="http://www.emacswiki.org/cgi-bin/wiki/MSVisualStudio#toc2"&gt;here&lt;/a&gt;. You can write this quick Visual Studio macro in Visual Basic that allows you to open the current VS file in an external Emacs frame for editing.&lt;br /&gt;&lt;br /&gt;This hack works great in Visual Studio 2008 with the latest Emacs build that comes with the &lt;a href="http://ourcomments.org/Emacs/EmacsW32.html"&gt;EmacsW32&lt;/a&gt; distribution (the version I'm using is 23.0.93.1). You can bind the macro to a keystroke in VS 2008 for ease of use. After you are done editing in Emacs, just close the document and go back to VS and it will notice that the file changed and ask you if you want to reload it. I can't believe I didn't know about this. Here's the code:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;    Sub OpenInEmacs()&lt;br /&gt;        Dim fn As String&lt;br /&gt;        Dim cmd As String&lt;br /&gt;        Dim lnum As Integer&lt;br /&gt;&lt;br /&gt;        fn = DTE.ActiveDocument.FullName&lt;br /&gt;        lnum = DTE.ActiveDocument.Selection.ActivePoint.Line&lt;br /&gt;        cmd = "Tools.Shell ""emacsclientw.exe"" -n +" + lnum.ToString + " " + fn&lt;br /&gt;&lt;br /&gt;        DTE.StatusBar.Text = "Opening " + fn + " in Emacs"&lt;br /&gt;        DTE.ToolWindows.CommandWindow.SendInput(cmd, True)&lt;br /&gt;    End Sub&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-7015511470171708773?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/7015511470171708773/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=7015511470171708773' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/7015511470171708773'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/7015511470171708773'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/06/emacs-as-visual-studio-editor.html' title='Emacs as the Visual Studio Editor'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-7943185074833569306</id><published>2009-06-21T14:37:00.000-07:00</published><updated>2009-08-12T23:18:19.675-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Hardware'/><category scheme='http://www.blogger.com/atom/ns#' term='Cool Stuff'/><title type='text'>New Tools</title><content type='html'>I talked about keyboards before on a &lt;a href="http://blog.theblinkingcursor.org/2008/08/diatec-filco-majestouch-keyboard.html"&gt;previous post&lt;/a&gt;. On that post I mentioned that, although I loved (and still love) my Filco, I would continue to &lt;span style="font-style:italic;"&gt;broaden my horizons&lt;/span&gt; by researching and using other boards. Well, that other board arrived on Friday and is an &lt;a href="http://www.cvtinc.com/products/keyboards/prime.htm"&gt;Avant Prime&lt;/a&gt;. &lt;br /&gt;&lt;br /&gt;&lt;strong&gt;History&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;Before I go into the technical details, I'd like to share a little bit of the history I uncovered while doing my research. &lt;br /&gt;&lt;br /&gt;Back in the late 80's and early 90's, after IBM made the PC architecture available for other companies to build clones of it, a little company out in California called Northgate Computers started to sell its PC clones from a mail catalog. Brand name PCs, like the original IBMs and Compaqs, were expensive and consumers were looking for alternatives. Companies like Northgate rushed in to fill that niche market. Out of the companies that were created during those days and sold from a catalog only Dell still exists today. &lt;br /&gt;&lt;br /&gt;But Northgate also manufactured a keyboard that was highly valued by geeks of that era. This was the OmniKey line of keyboards. Northgate went out of business for good in 2005, but by this time a little company near Minneapolis, MN had already started to manufacture the OmniKey line under a new name. This company is Creative Vision Technologies and they make the Avant Prime and Avant Stellar keyboards. The Avant boards are analogous to the OmniKey 101 and OmniKey Ultra, respectively.&lt;br /&gt;&lt;br /&gt;&lt;p&gt;&lt;a href="http://farm3.static.flickr.com/2449/3643450788_72a4c5298d_b.jpg" title="Avant Prime Keyboard &amp;amp; TrackMan by gorauskas, on Flickr"&gt;&lt;img src="http://farm3.static.flickr.com/2449/3643450788_72a4c5298d.jpg" width="500" height="196" alt="Avant Prime Keyboard &amp;amp; TrackMan" target="new" /&gt;&lt;/a&gt;&lt;br/&gt;The Avant Prime Keyboard (click for larger image)&lt;/p&gt;&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Why Another Keyboard?&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;My wife actually asked me this question. The honest answer is that when it comes to keyboards, I'm a little obsessive compulsive. &lt;br /&gt;&lt;br /&gt;The criteria that I set for myself when researching boards this time was the following: 1) I absolutely have to have a real &lt;em&gt;Ctrl&lt;/em&gt; key on the home row and 2) I am absolutely not going to use any software or configuration hacks to get the &lt;em&gt;Ctrl&lt;/em&gt; key to work on the home row. Well, that really narrowed the pool of available boards to chose from to just three. The other thing I am looking to accomplish is to become a more efficient and faster typist.&lt;br /&gt;&lt;br /&gt;Currently on the market I can only find the Happy Hacking, the Unicomp Customizer with custom key layout and Avant boards that have these features. Of course, there are always those vintage Sun or OmniKey boards listed on EBay, but I was looking for something new.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;The Gory Details&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;Visually, the Prime looks like a standard legacy IBM PC board with white and gray keycaps, a row of function keys across the top and the standard LEDs on the top-right corner above the number pad cluster. A couple of other minor differences are that the + key in the numpad is just a regular size key in order to make space for a = key that goes right under it. The main Enter key is large and shaped like an L in reverse. The |\ key is located next to the left Shift key.&lt;br /&gt;&lt;br /&gt;The configuration of the Avant Prime out-of-the-box is to have the &lt;em&gt;CapsLock&lt;/em&gt; key on the home row to the left of the A key and the &lt;em&gt;Ctrl&lt;/em&gt; key on the far bottom left corner of the board. But the Prime also ships with a handy key puller tool and replacements keycaps for the &lt;em&gt;CapsLock&lt;/em&gt; and &lt;em&gt;Ctrl&lt;/em&gt; keys. This allows me to easily swap the physical keycaps for those keys as you can see in the image (click it for full size). &lt;br /&gt;&lt;br /&gt;But just switching the keycaps using the handy puller tool doesn't do the trick; you have to actually remap the keys to emit the proper codes to the computer. This is where the Avant keyboards really shine as they are fully programmable. The Prime has an Atmel AT89C52 microcontroller with 8K flash RAM inside it that you can program by using certain key combinations.&lt;br /&gt;&lt;br /&gt;To swap the &lt;em&gt;CapsLock&lt;/em&gt; and left &lt;em&gt;Ctrl&lt;/em&gt; keys you have to first press the right &lt;em&gt;Ctrl&lt;/em&gt; key four times and then press left Shift and 1 together to enter the Prime's programming mode. Then press the R key to tell the Atmel that you are going to remap a key. At this point the NumLock, CapsLock and ScrollLock LEDs will be blinking really fast. The LED on the Up Arrow key will also be blinking. Now you need to press the key you want to move, which we will call the From Key. In my case this is the &lt;em&gt;CapsLock&lt;/em&gt; key. Once you press the &lt;em&gt;CapsLock&lt;/em&gt; key, all the LEDs start blinking at a slower rate than originally. Now you need to choose the To Key, which in my case is the left &lt;em&gt;Ctrl&lt;/em&gt; key. At this point you will have two &lt;em&gt;CapsLock&lt;/em&gt; keys, the original one and the left &lt;em&gt;Ctrl&lt;/em&gt; key. So we need to remap the left &lt;span style="font-style:italic;"&gt;Ctrl&lt;/span&gt; to the original &lt;span style="font-style:italic;"&gt;CapsLock&lt;/span&gt; key. We choose the left &lt;em&gt;Ctrl&lt;/em&gt; key as our from key and then the original &lt;em&gt;CapsLock&lt;/em&gt; as our to key. You will know that you are doing the right thing because the blinking rate of the LEDs will change again when you are doing the second remap. Once you are done with that you can press the right &lt;em&gt;Ctrl&lt;/em&gt; key once to get out of the Prime's programming mode. &lt;br /&gt;&lt;br /&gt;It's also important to mention that once you remap those keys, the new functions are persisted in the Atmel's flash memory and will transfer with the keyboard even if you go to a different computer or operating system.&lt;br /&gt;&lt;br /&gt;The Prime has white stem Alps key switches, which means that it provides both an auditory and a tactile feedback. You can hear the click of the keys and you can also feel them on your fingers. If you are familiar with other mechanical key switches like the Cherry switches, you will notice that the Prime's switches provide a more pronounced clicky feel and sound.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;So You Want One&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;Some things to note about the Avant Prime that may influence one's decision to get the board are 1) the Avant Prime has a PS/2 connector only and requires a PS/2 to USB adapter to work on computers that don't have PS/2 ports. This is not too much of a problem as most computers today still ship with PS/2 ports for mouse and keyboard. But I'm also starting to see some laptops and netbooks ship out without it. Additionally, Apple computers don't have a PS/2 port. 2) The Avant Prime is a clicky, heavy and loud keyboard. When you press a key on the Prime it resonates with a metallic echo and it definitely gives you tactile feedback. Your fingers will know that you pushed a key and I like that, but if you prefer a quieter, lower profile board, than the Prime is not for you.&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;What Is That Trackball Doing There?&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;Another aspect of my workflow that I am looking to tweak is to use my mouse less and less and keep my hands on the keyboard for as long as I possibly can. I thought that one way to do that is to break that pattern of reaching for the mouse and feeling very comfortable with it. So I also got me a Logitech TrackMan, and it has most definitely helped in my goal. First, I am not a trackball person, so it definitely breaks the original work flow. But I still have to make a conscious effort to keep my hands away from it. It helps to print out a shortcut cheat sheet for your desktop of choice, and post it right on your monitor. I have to say that keeping your hands on the keyboard does increase efficiency, speed and you get used to the new paradigm very quickly. &lt;br /&gt;&lt;br /&gt;&lt;strong&gt;Wrap Up&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;Based on my &lt;a href="http://blog.theblinkingcursor.org/2008/08/diatec-filco-majestouch-keyboard.html"&gt;previous post&lt;/a&gt;, a friend has already asked me if I like the Prime better than the Filco. Well, I think that the jury's still out on that one. What I can say with confidence is that I will be using the Prime at work and the Filco at home, so I will have plenty of opportunity to compare the two more closely, but right now I still few like it's too early to tell.&lt;br /&gt;&lt;br /&gt;Anyway, the Avant Prime is going for $149 and I got mine from &lt;a href="http://www.lonestarkeyboards.com/Avant-Prime-Programmable-Keyboard/productinfo/KB-14-1002/"&gt;Lone Star Keyboards&lt;/a&gt; because they had the best shipping rates of all Avant distributors. They shipped my Prime promptly and I am very pleased with their service overall. The TrackMan I got from &lt;a href="http://www.amazon.com/gp/product/B00006B9CR/ "&gt;Amazon&lt;/a&gt; for $49.95.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-7943185074833569306?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/7943185074833569306/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=7943185074833569306' title='1 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/7943185074833569306'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/7943185074833569306'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/06/new-tools.html' title='New Tools'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>1</thr:total></entry><entry><id>tag:blogger.com,1999:blog-2525926494363680472.post-7947449813320799053</id><published>2009-06-19T21:58:00.000-07:00</published><updated>2009-08-12T23:24:31.756-07:00</updated><category scheme='http://www.blogger.com/atom/ns#' term='Programming'/><title type='text'>Terminating Your C# Application</title><content type='html'>Today I was doing some experimenting with some ideas and I created a console application to try things out in. From a certain function I started to type &lt;code&gt;Application.Exit()&lt;/code&gt; and I quickly realized the rookie mistake. The &lt;code&gt;Application&lt;/code&gt; class is part of the &lt;code&gt;System.Windows.Forms&lt;/code&gt; namespace, and therefore, it's not the optimal way to terminate your console application. For that there is &lt;code&gt;Environment.Exit(-1)&lt;/code&gt;... But this situation begs the question... what is the difference between the two statements:&lt;br /&gt;&lt;pre&gt;&lt;code&gt;&lt;br /&gt;System.Environment.Exit(-1);&lt;br /&gt;System.Windows.Forms.Application.Exit();&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;They both get you what you want, which is to halt your application. But there are some differences between the two methods under the hood, according to the Microsoft documentation:&lt;br /&gt;&lt;br /&gt;&lt;ol&gt;&lt;li&gt;&lt;span style="font-style:italic;"&gt;System.Environment.Exit()&lt;/span&gt; - Terminates the current process and gives the underlying operating system the specified exit code.&lt;/li&gt;&lt;li&gt;&lt;span style="font-style:italic;"&gt;System.Windows.Forms.Application.Exit()&lt;/span&gt; - Informs all message loops that they must terminate, and then closes all application windows after the messages have been processed.&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;My take from this is that you always want to use &lt;code&gt;Application.Exit()&lt;/code&gt; in a WinForms application in order to terminate things as gracefully as possible. In a console application you won't have the &lt;code&gt;Application&lt;/code&gt; class available (unless you specifically import it) so just call &lt;code&gt;Environment.Exit()&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;Also remember that there usually are several things you may want to do before terminating everything, such as persisting some objects, saving some settings, closing open files, etc. It is your responsibility to do those tasks before terminating... Provided you can control that and you are not crashing from an unhandled exception.&lt;div class="blogger-post-footer"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2525926494363680472-7947449813320799053?l=blog.theblinkingcursor.org' alt='' /&gt;&lt;/div&gt;</content><link rel='replies' type='application/atom+xml' href='http://blog.theblinkingcursor.org/feeds/7947449813320799053/comments/default' title='Post Comments'/><link rel='replies' type='text/html' href='https://www.blogger.com/comment.g?blogID=2525926494363680472&amp;postID=7947449813320799053' title='0 Comments'/><link rel='edit' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/7947449813320799053'/><link rel='self' type='application/atom+xml' href='http://www.blogger.com/feeds/2525926494363680472/posts/default/7947449813320799053'/><link rel='alternate' type='text/html' href='http://blog.theblinkingcursor.org/2009/06/terminating-your-c-application.html' title='Terminating Your C# Application'/><author><name>Jonas Gorauskas</name><uri>http://www.blogger.com/profile/05805866365928749435</uri><email>noreply@blogger.com</email><gd:extendedProperty xmlns:gd='http://schemas.google.com/g/2005' name='OpenSocialUserId' value='01725957595876567466'/></author><thr:total>0</thr:total></entry></feed>